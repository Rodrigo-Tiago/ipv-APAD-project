-- Adicionar campo que indica se o registo está atualizado ou não
ALTER TABLE AGE_RESTRICTIONS ADD COLUMN IS_UP_TO_DATE SMALLINT NOT NULL DEFAULT 0;
ALTER TABLE DIRECTORS ADD COLUMN IS_UP_TO_DATE SMALLINT NOT NULL DEFAULT 0;
ALTER TABLE TYPES ADD COLUMN IS_UP_TO_DATE SMALLINT NOT NULL DEFAULT 0;
ALTER TABLE CATEGORIES ADD COLUMN IS_UP_TO_DATE SMALLINT NOT NULL DEFAULT 0;
ALTER TABLE CONTENTS ADD COLUMN IS_UP_TO_DATE SMALLINT NOT NULL DEFAULT 0;
ALTER TABLE CONTENT_CATEGORIES ADD COLUMN IS_UP_TO_DATE SMALLINT NOT NULL DEFAULT 0;
ALTER TABLE AGE_GROUPS ADD COLUMN IS_UP_TO_DATE SMALLINT NOT NULL DEFAULT 0;
ALTER TABLE COUNTRIES ADD COLUMN IS_UP_TO_DATE SMALLINT NOT NULL DEFAULT 0;
ALTER TABLE GENDERS ADD COLUMN IS_UP_TO_DATE SMALLINT NOT NULL DEFAULT 0;
ALTER TABLE SUBSCRIPTION_STATUS ADD COLUMN IS_UP_TO_DATE SMALLINT NOT NULL DEFAULT 0;
ALTER TABLE USERS ADD COLUMN IS_UP_TO_DATE SMALLINT NOT NULL DEFAULT 0;
ALTER TABLE SESSIONS ADD COLUMN IS_UP_TO_DATE SMALLINT NOT NULL DEFAULT 0;

-- Atualizar valor dos registos existentes para 0 (não atualizados)
UPDATE AGE_RESTRICTIONS SET IS_UP_TO_DATE = 0;
UPDATE DIRECTORS SET IS_UP_TO_DATE = 0;
UPDATE CATEGORIES SET IS_UP_TO_DATE = 0;
UPDATE CONTENTS SET IS_UP_TO_DATE = 0;
UPDATE CONTENT_CATEGORIES SET IS_UP_TO_DATE = 0;
UPDATE AGE_GROUPS SET IS_UP_TO_DATE = 0;
UPDATE COUNTRIES SET IS_UP_TO_DATE = 0;
UPDATE GENDERS SET IS_UP_TO_DATE = 0;
UPDATE SUBSCRIPTION_STATUS SET IS_UP_TO_DATE = 0;
UPDATE USERS SET IS_UP_TO_DATE = 0;
UPDATE SESSIONS SET IS_UP_TO_DATE = 0;

-- Criar triggers para atualizar o campo IS_UP_TO_DATE para 0 quando um registo é atualizado
-- AGE_RESTRICTIONS
CREATE OR REPLACE FUNCTION set_age_restrictions_not_up_to_date()
RETURNS TRIGGER AS $$
BEGIN
    NEW.IS_UP_TO_DATE := 0;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trg_age_restrictions_update
BEFORE UPDATE ON AGE_RESTRICTIONS
FOR EACH ROW
EXECUTE FUNCTION set_age_restrictions_not_up_to_date();


-- DIRECTORS
CREATE OR REPLACE FUNCTION set_directors_not_up_to_date()
RETURNS TRIGGER AS $$
BEGIN
    NEW.IS_UP_TO_DATE := 0;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trg_directors_update
BEFORE UPDATE ON DIRECTORS
FOR EACH ROW
EXECUTE FUNCTION set_directors_not_up_to_date();


-- TYPES
CREATE OR REPLACE FUNCTION set_types_not_up_to_date()
RETURNS TRIGGER AS $$
BEGIN
    NEW.IS_UP_TO_DATE := 0;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trg_types_update
BEFORE UPDATE ON TYPES
FOR EACH ROW
EXECUTE FUNCTION set_types_not_up_to_date();


-- CATEGORIES
CREATE OR REPLACE FUNCTION set_categories_not_up_to_date()
RETURNS TRIGGER AS $$
BEGIN
    NEW.IS_UP_TO_DATE := 0;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trg_categories_update
BEFORE UPDATE ON CATEGORIES
FOR EACH ROW
EXECUTE FUNCTION set_categories_not_up_to_date();


-- CONTENTS
CREATE OR REPLACE FUNCTION set_contents_not_up_to_date()
RETURNS TRIGGER AS $$
BEGIN
    NEW.IS_UP_TO_DATE := 0;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trg_contents_update
BEFORE UPDATE ON CONTENTS
FOR EACH ROW
EXECUTE FUNCTION set_contents_not_up_to_date();


-- CONTENT_CATEGORIES
CREATE OR REPLACE FUNCTION set_content_categories_not_up_to_date()
RETURNS TRIGGER AS $$
BEGIN
    NEW.IS_UP_TO_DATE := 0;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trg_content_categories_update
BEFORE UPDATE ON CONTENT_CATEGORIES
FOR EACH ROW
EXECUTE FUNCTION set_content_categories_not_up_to_date();


-- AGE_GROUPS
CREATE OR REPLACE FUNCTION set_age_groups_not_up_to_date()
RETURNS TRIGGER AS $$
BEGIN
    NEW.IS_UP_TO_DATE := 0;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trg_age_groups_update
BEFORE UPDATE ON AGE_GROUPS
FOR EACH ROW
EXECUTE FUNCTION set_age_groups_not_up_to_date();


-- COUNTRIES
CREATE OR REPLACE FUNCTION set_countries_not_up_to_date()
RETURNS TRIGGER AS $$
BEGIN
    NEW.IS_UP_TO_DATE := 0;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trg_countries_update
BEFORE UPDATE ON COUNTRIES
FOR EACH ROW
EXECUTE FUNCTION set_countries_not_up_to_date();


-- GENDERS
CREATE OR REPLACE FUNCTION set_genders_not_up_to_date()
RETURNS TRIGGER AS $$
BEGIN
    NEW.IS_UP_TO_DATE := 0;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trg_genders_update
BEFORE UPDATE ON GENDERS
FOR EACH ROW
EXECUTE FUNCTION set_genders_not_up_to_date();


-- SUBSCRIPTION_STATUS
CREATE OR REPLACE FUNCTION set_subscription_status_not_up_to_date()
RETURNS TRIGGER AS $$
BEGIN
    NEW.IS_UP_TO_DATE := 0;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trg_subscription_status_update
BEFORE UPDATE ON SUBSCRIPTION_STATUS
FOR EACH ROW
EXECUTE FUNCTION set_subscription_status_not_up_to_date();


-- USERS
CREATE OR REPLACE FUNCTION set_users_not_up_to_date()
RETURNS TRIGGER AS $$
BEGIN
    NEW.IS_UP_TO_DATE := 0;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trg_users_update
BEFORE UPDATE ON USERS
FOR EACH ROW
EXECUTE FUNCTION set_users_not_up_to_date();


-- SESSIONS
CREATE OR REPLACE FUNCTION set_sessions_not_up_to_date()
RETURNS TRIGGER AS $$
BEGIN
    NEW.IS_UP_TO_DATE := 0;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trg_sessions_update
BEFORE UPDATE ON SESSIONS
FOR EACH ROW
EXECUTE FUNCTION set_sessions_not_up_to_date();