-- Adicionar campo que indica se o registo está atualizado ou não
ALTER TABLE AGE_GROUPS ADD COLUMN IS_UP_TO_DATE SMALLINT NOT NULL DEFAULT 0;
ALTER TABLE GENDERS ADD COLUMN IS_UP_TO_DATE SMALLINT NOT NULL DEFAULT 0;
ALTER TABLE COUNTRIES ADD COLUMN IS_UP_TO_DATE SMALLINT NOT NULL DEFAULT 0;
ALTER TABLE SUBSCRIPTION_STATUS ADD COLUMN IS_UP_TO_DATE SMALLINT NOT NULL DEFAULT 0;
ALTER TABLE USERS ADD COLUMN IS_UP_TO_DATE SMALLINT NOT NULL DEFAULT 0;

-- Atualizar valor dos registos existentes para 0 (não atualizados)
UPDATE USERS SET IS_UP_TO_DATE = 0;
UPDATE AGE_GROUPS SET IS_UP_TO_DATE = 0;
UPDATE GENDERS SET IS_UP_TO_DATE = 0;
UPDATE COUNTRIES SET IS_UP_TO_DATE = 0;
UPDATE SUBSCRIPTION_STATUS SET IS_UP_TO_DATE = 0;

-- Criar triggers para atualizar o campo IS_UP_TO_DATE para 0 quando um registo é atualizado
-- AGE_GROUPS
CREATE OR REPLACE FUNCTION set_age_groups_not_up_to_date()
RETURNS TRIGGER AS $$
BEGIN
    NEW.IS_UP_TO_DATE := 0;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trg_age_groups_update
BEFORE UPDATE ON AGE_GROUPS
FOR EACH ROW
EXECUTE FUNCTION set_age_groups_not_up_to_date();

-- GENDERS
CREATE OR REPLACE FUNCTION set_genders_not_up_to_date()
RETURNS TRIGGER AS $$
BEGIN
    NEW.IS_UP_TO_DATE := 0;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trg_genders_update
BEFORE UPDATE ON GENDERS
FOR EACH ROW
EXECUTE FUNCTION set_genders_not_up_to_date();

-- COUNTRIES
CREATE OR REPLACE FUNCTION set_countries_not_up_to_date()
RETURNS TRIGGER AS $$
BEGIN
    NEW.IS_UP_TO_DATE := 0;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trg_countries_update
BEFORE UPDATE ON COUNTRIES
FOR EACH ROW
EXECUTE FUNCTION set_countries_not_up_to_date();

-- SUBSCRIPTION_STATUS
CREATE OR REPLACE FUNCTION set_subscription_status_not_up_to_date()
RETURNS TRIGGER AS $$
BEGIN
    NEW.IS_UP_TO_DATE := 0;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trg_subscription_status_update
BEFORE UPDATE ON SUBSCRIPTION_STATUS
FOR EACH ROW
EXECUTE FUNCTION set_subscription_status_not_up_to_date();

-- USERS
CREATE OR REPLACE FUNCTION set_users_not_up_to_date()
RETURNS TRIGGER AS $$
BEGIN
    NEW.IS_UP_TO_DATE := 0;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trg_users_update
BEFORE UPDATE ON USERS
FOR EACH ROW
EXECUTE FUNCTION set_users_not_up_to_date();